params {
      out_dir = './output'
      report_dir = './reports'
      custom_config_version = 'master'
      custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
}

profiles {
      conda { 
            conda.enabled = true
            process {
                  conda = "$baseDir/envs/environment.yaml"
                  withLabel: build_config {
                  conda = "$baseDir/envs/environment-build_config.yaml"
                  }
            }
      }

      docker { 
            docker.enabled = true
            process {
                  container = 'haniffalab/webatlas-pipeline:0.4.0'
                  withLabel: build_config {
                        container = 'haniffalab/webatlas-pipeline-build_config:0.4.0'
                  }
            }
      }

      singularity { 
            singularity.enabled = false
            singularity.autoMounts = false
      }

      sanger_lsf {
            process.container = 'haniffalab/webatlas-pipeline:0.4.0'
            docker.enabled = false
            singularity {
                  enabled = true
                  autoMounts = false
                  runOptions = '--bind /lustre --bind /nfs --cleanenv --home /tmp'
            }
            executor {
                  name = 'lsf'
                  perJobMemLimit = true
                  container = '/lustre/scratch127/cellgen/cellgeni/tickets/tic-2248/actions/docker--haniffalab--vitessce-pipeline--0.0.1.sif'
                  jobName = { 
                        "$task.hash"
                  }
                  queue = 'imaging'
            }
      }      
}

process {
      errorStrategy = { 
            task.exitStatus in [130,137..140] ? 'retry' : 'terminate' 
      }

      maxRetries = 5

      withLabel: std_mem {
            memory = { 
                  2.GB * task.attempt 
            }
      }

      withLabel: big_mem {
            memory = { 
                  10.GB * task.attempt 
            }
      }         

      withLabel: std_cpu {
            cpus = 1
      }      
  
      withLabel: big_cpu {
            cpus = { 
                  4 * task.attempt 
            }
      }
}